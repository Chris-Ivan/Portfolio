{"version":3,"sources":["../../src/BlockContent.js","../node_modules/@sanity/block-content-to-hyperscript/internals.js","../../src/getImageUrl.js","../../src/mergeSerializers.js","../../src/internals.js","../../src/serializers.js","../node_modules/@sanity/block-content-to-hyperscript/node_modules/@sanity/generate-help-url/index.js","../../../src/parseAssetId.ts","../../../src/parseSource.ts","../../../src/urlForImage.ts","../../../src/builder.ts","../../src/blocksToNodes.js","../../src/buildMarksTree.js","../../src/nestLists.js","../../src/generateKeys.js","../../../src/targets/dom.js"],"names":["React","require","PropTypes","internals","serializers","serializeSpan","renderProps","getImageUrl","blocksToNodes","mergeSerializers","renderNode","SanityBlockContent","props","customSerializers","blockProps","Object","assign","blocks","className","renderContainerOnSingleChild","projectId","dataset","imageOptions","shape","types","marks","list","listItem","block","span","func","oneOfType","arrayOf","_type","isRequired","module","exports","generateHelpUrl","urlBuilder","objectAssign","enc","materializeError","node","options","asset","Error","query","keys","params","key","getQueryString","defaultSerializers","userSerializers","type","acc","isDefined","getSerializers","serializeOptions","serializerOpts","useDashedStyles","h","tag","style","test","image","img","src","strong","RawMarkSerializer","em","code","underline","textDecoration","link","href","children","isInline","blockType","serializer","mark","markType","console","hardBreak","container","markFallback","text","empty","serializedNode","slug","example","parseAssetId","ref","id","dimensionString","format","width","imgWidthStr","height","imgHeightStr","isFinite","isRef","isAsset","isAssetStub","source","parseSource","isUrl","_ref","urlToId","applyDefaults","url","result","left","top","bottom","right","x","y","SPEC_NAME_TO_URL_NAME_MAPPINGS","urlForImage","spec","cropLeft","Math","cropTop","crop","hotSpotVerticalRadius","hotSpotHorizontalRadius","hotSpotCenterX","hotSpotCenterY","hotspot","fit","specToImageUrl","cdnUrl","filename","baseUrl","flip","specName","mapping","param","encodeURIComponent","imgWidth","imgHeight","rect","desiredAspectRatio","cropRect","validFits","validCrops","validAutoModes","client","entry","isSanityClient","apiUrl","ImageUrlBuilder","apiHost","this","parent","withOptions","newOptions","rewriteSpecName","bg","dpr","focalPoint","maxWidth","minWidth","maxHeight","minHeight","size","blur","sharpen","invert","orientation","quality","forceDownload","download","flipHorizontal","flipVertical","ignoreImageParams","value","saturation","auto","toString","buildMarksTree","nestLists","generateKeys","optionProps","defaults","isListItem","properties","rawBlocks","Array","keyedBlocks","opts","level","serializeList","tree","index","serializeListItem","i","siblings","findListItemIndex","isSpan","serializeNode","serializeBlock","Boolean","nodes","containerProps","defaultMarks","sortMarksByOccurences","spans","markOccurences","occurences","siblingIndex","sibling","sortByOccurence","sortMarks","markA","markB","aOccurences","bOccurences","aDefaultPos","bDefaultPos","markDefs","sortedMarks","rootNode","nodeStack","marksNeeded","pos","currentNode","findLastParentNode","_key","def","markKey","lines","line","lastNode","isListBlock","blockMatchesList","listFromBlock","lastChild","findListMatching","matching","filterOnType","mode","currentList","newList","lastListItem","newLastChild","match","checksum","str","hash","strlen","item","JSON","nestMarks"],"mappings":"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","file":"static/js/3.829f4621.chunk.js","sourcesContent":["const React = require('react')\nconst PropTypes = require('prop-types')\nconst internals = require('@sanity/block-content-to-hyperscript/internals')\nconst {serializers, serializeSpan, renderProps} = require('./targets/dom')\n\nconst {getImageUrl, blocksToNodes, mergeSerializers} = internals\nconst renderNode = React.createElement\n\nconst SanityBlockContent = props => {\n  const customSerializers = mergeSerializers(\n    SanityBlockContent.defaultSerializers,\n    props.serializers\n  )\n\n  const blockProps = Object.assign({}, renderProps, props, {\n    serializers: customSerializers,\n    blocks: props.blocks || []\n  })\n\n  return blocksToNodes(renderNode, blockProps, serializers, serializeSpan)\n}\n\n// Expose default serializers to the user\nSanityBlockContent.defaultSerializers = serializers\n\n// Expose logic for building image URLs from an image reference/node\nSanityBlockContent.getImageUrl = getImageUrl\n\nSanityBlockContent.propTypes = {\n  className: PropTypes.string,\n  renderContainerOnSingleChild: PropTypes.bool,\n\n  // When rendering images, we need project id and dataset, unless images are materialized\n  projectId: PropTypes.string,\n  dataset: PropTypes.string,\n  imageOptions: PropTypes.object,\n\n  serializers: PropTypes.shape({\n    // Common overrides\n    types: PropTypes.object,\n    marks: PropTypes.object,\n\n    // Less common overrides\n    list: PropTypes.func,\n    listItem: PropTypes.func,\n\n    // Low-level serializers\n    block: PropTypes.func,\n    span: PropTypes.func\n  }),\n\n  blocks: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        _type: PropTypes.string.isRequired\n      })\n    ),\n    PropTypes.shape({\n      _type: PropTypes.string.isRequired\n    })\n  ]).isRequired\n}\n\nSanityBlockContent.defaultProps = {\n  renderContainerOnSingleChild: false,\n  serializers: {},\n  imageOptions: {}\n}\n\nmodule.exports = SanityBlockContent\n","module.exports = require('./lib/internals')\n","const generateHelpUrl = require('@sanity/generate-help-url')\nconst urlBuilder = require('@sanity/image-url')\nconst objectAssign = require('object-assign')\n\nconst enc = encodeURIComponent\nconst materializeError = `You must either:\n  - Pass \\`projectId\\` and \\`dataset\\` to the block renderer\n  - Materialize images to include the \\`url\\` field.\n\nFor more information, see ${generateHelpUrl('block-content-image-materializing')}`\n\nconst getQueryString = options => {\n  const query = options.imageOptions\n  const keys = Object.keys(query)\n  if (!keys.length) {\n    return ''\n  }\n\n  const params = keys.map(key => `${enc(key)}=${enc(query[key])}`)\n  return `?${params.join('&')}`\n}\n\nconst buildUrl = props => {\n  const {node, options} = props\n  const {projectId, dataset} = options\n  const asset = node.asset\n\n  if (!asset) {\n    throw new Error('Image does not have required `asset` property')\n  }\n\n  if (asset.url) {\n    return asset.url + getQueryString(options)\n  }\n\n  if (!projectId || !dataset) {\n    throw new Error(materializeError)\n  }\n\n  const ref = asset._ref\n  if (!ref) {\n    throw new Error('Invalid image reference in block, no `_ref` found on `asset`')\n  }\n\n  return urlBuilder(objectAssign({projectId, dataset}, options.imageOptions || {}))\n    .image(node)\n    .toString()\n}\n\nmodule.exports = buildUrl\n","const objectAssign = require('object-assign')\nconst isDefined = val => typeof val !== 'undefined'\n\n// Recursively merge/replace default serializers with user-specified serializers\nmodule.exports = function mergeSerializers(defaultSerializers, userSerializers) {\n  return Object.keys(defaultSerializers).reduce((acc, key) => {\n    const type = typeof defaultSerializers[key]\n    if (type === 'function') {\n      acc[key] = isDefined(userSerializers[key]) ? userSerializers[key] : defaultSerializers[key]\n    } else if (type === 'object') {\n      acc[key] = objectAssign({}, defaultSerializers[key], userSerializers[key])\n    } else {\n      acc[key] =\n        typeof userSerializers[key] === 'undefined' ? defaultSerializers[key] : userSerializers[key]\n    }\n    return acc\n  }, {})\n}\n","const getSerializers = require('./serializers')\nconst blocksToNodes = require('./blocksToNodes')\nconst getImageUrl = require('./getImageUrl')\nconst mergeSerializers = require('./mergeSerializers')\n\nmodule.exports = {\n  blocksToNodes: (renderNode, props, defaultSerializers, serializeSpan) => {\n    if (defaultSerializers) {\n      return blocksToNodes(renderNode, props, defaultSerializers, serializeSpan)\n    }\n\n    // Backwards-compatibility\n    const serializers = getSerializers(renderNode)\n    return blocksToNodes(\n      renderNode,\n      props,\n      serializers.defaultSerializers,\n      serializers.serializeSpan\n    )\n  },\n  getSerializers,\n  getImageUrl,\n  mergeSerializers\n}\n","const objectAssign = require('object-assign')\nconst getImageUrl = require('./getImageUrl')\n\nmodule.exports = (h, serializerOpts) => {\n  const serializeOptions = serializerOpts || {useDashedStyles: false}\n\n  // Low-level block serializer\n  function BlockSerializer(props) {\n    const {node, serializers, options, isInline, children} = props\n    const blockType = node._type\n    const serializer = serializers.types[blockType]\n    if (!serializer) {\n      throw new Error(\n        `Unknown block type \"${blockType}\", please specify a serializer for it in the \\`serializers.types\\` prop`\n      )\n    }\n\n    return h(serializer, {node, options, isInline}, children)\n  }\n\n  // Low-level span serializer\n  function SpanSerializer(props) {\n    const {mark, children} = props.node\n    const isPlain = typeof mark === 'string'\n    const markType = isPlain ? mark : mark._type\n    const serializer = props.serializers.marks[markType]\n    if (!serializer) {\n      // @todo Revert back to throwing errors?\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Unknown mark type \"${markType}\", please specify a serializer for it in the \\`serializers.marks\\` prop`\n      )\n      return h(props.serializers.markFallback, null, children)\n    }\n\n    return h(serializer, props.node, children)\n  }\n\n  // Low-level list serializer\n  function ListSerializer(props) {\n    const tag = props.type === 'bullet' ? 'ul' : 'ol'\n    return h(tag, null, props.children)\n  }\n\n  // Low-level list item serializer\n  function ListItemSerializer(props) {\n    const children =\n      !props.node.style || props.node.style === 'normal'\n        ? // Don't wrap plain text in paragraphs inside of a list item\n          props.children\n        : // But wrap any other style in whatever the block serializer says to use\n          h(props.serializers.types.block, props, props.children)\n\n    return h('li', null, children)\n  }\n\n  // Renderer of an actual block of type `block`. Confusing, we know.\n  function BlockTypeSerializer(props) {\n    const style = props.node.style || 'normal'\n\n    if (/^h\\d/.test(style)) {\n      return h(style, null, props.children)\n    }\n\n    return style === 'blockquote'\n      ? h('blockquote', null, props.children)\n      : h('p', null, props.children)\n  }\n\n  // Serializers for things that can be directly attributed to a tag without any props\n  // We use partial application to do this, passing the tag name as the first argument\n  function RawMarkSerializer(tag, props) {\n    return h(tag, null, props.children)\n  }\n\n  function UnderlineSerializer(props) {\n    const style = serializeOptions.useDashedStyles\n      ? {'text-decoration': 'underline'}\n      : {textDecoration: 'underline'}\n\n    return h('span', {style}, props.children)\n  }\n\n  function StrikeThroughSerializer(props) {\n    return h('del', null, props.children)\n  }\n\n  function LinkSerializer(props) {\n    return h('a', {href: props.mark.href}, props.children)\n  }\n\n  function ImageSerializer(props) {\n    if (!props.node.asset) {\n      return null\n    }\n\n    const img = h('img', {src: getImageUrl(props)})\n    return props.isInline ? img : h('figure', null, img)\n  }\n\n  // Serializer that recursively calls itself, producing a hyperscript tree of spans\n  function serializeSpan(span, serializers, index, options) {\n    if (span === '\\n' && serializers.hardBreak) {\n      return h(serializers.hardBreak, {key: `hb-${index}`})\n    }\n\n    if (typeof span === 'string') {\n      return serializers.text ? h(serializers.text, {key: `text-${index}`}, span) : span\n    }\n\n    let children\n    if (span.children) {\n      children = {\n        children: span.children.map((child, i) =>\n          options.serializeNode(child, i, span.children, true)\n        )\n      }\n    }\n\n    const serializedNode = objectAssign({}, span, children)\n\n    return h(serializers.span, {\n      key: span._key || `span-${index}`,\n      node: serializedNode,\n      serializers\n    })\n  }\n\n  const HardBreakSerializer = () => h('br')\n  const defaultMarkSerializers = {\n    strong: RawMarkSerializer.bind(null, 'strong'),\n    em: RawMarkSerializer.bind(null, 'em'),\n    code: RawMarkSerializer.bind(null, 'code'),\n    underline: UnderlineSerializer,\n    'strike-through': StrikeThroughSerializer,\n    link: LinkSerializer\n  }\n\n  const defaultSerializers = {\n    // Common overrides\n    types: {\n      block: BlockTypeSerializer,\n      image: ImageSerializer\n    },\n    marks: defaultMarkSerializers,\n\n    // Less common overrides\n    list: ListSerializer,\n    listItem: ListItemSerializer,\n\n    block: BlockSerializer,\n    span: SpanSerializer,\n    hardBreak: HardBreakSerializer,\n\n    // Container element\n    container: 'div',\n\n    // When we can't resolve the mark properly, use this renderer as the container\n    markFallback: 'span',\n\n    // Allow overriding text renderer, but leave undefined to just use plain strings by default\n    text: undefined,\n\n    // Empty nodes (React uses null, hyperscript with empty strings)\n    empty: ''\n  }\n\n  return {\n    defaultSerializers,\n    serializeSpan\n  }\n}\n","var baseUrl = 'https://docs.sanity.io/help/'\n\nmodule.exports = function generateHelpUrl(slug) {\n  return baseUrl + slug\n}\n","const example = 'image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg'\n\nexport default function parseAssetId(ref: string) {\n  const [, id, dimensionString, format] = ref.split('-')\n\n  if (!id || !dimensionString || !format) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  const [imgWidthStr, imgHeightStr] = dimensionString.split('x')\n\n  const width = +imgWidthStr\n  const height = +imgHeightStr\n\n  const isValidAssetId = isFinite(width) && isFinite(height)\n  if (!isValidAssetId) {\n    throw new Error(`Malformed asset _ref '${ref}'. Expected an id like \"${example}\".`)\n  }\n\n  return {id, width, height, format}\n}\n","import {\n  SanityAsset,\n  SanityImageObject,\n  SanityImageSource,\n  SanityImageWithAssetStub,\n  SanityReference,\n} from './types'\n\nconst isRef = (src: SanityImageSource): src is SanityReference => {\n  const source = src as SanityReference\n  return source ? typeof source._ref === 'string' : false\n}\n\nconst isAsset = (src: SanityImageSource): src is SanityAsset => {\n  const source = src as SanityAsset\n  return source ? typeof source._id === 'string' : false\n}\n\nconst isAssetStub = (src: SanityImageSource): src is SanityImageWithAssetStub => {\n  const source = src as SanityImageWithAssetStub\n  return source && source.asset ? typeof source.asset.url === 'string' : false\n}\n\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nexport default function parseSource(source?: SanityImageSource) {\n  if (!source) {\n    return null\n  }\n\n  let image: SanityImageObject\n\n  if (typeof source === 'string' && isUrl(source)) {\n    // Someone passed an existing image url?\n    image = {\n      asset: {_ref: urlToId(source)},\n    }\n  } else if (typeof source === 'string') {\n    // Just an asset id\n    image = {\n      asset: {_ref: source},\n    }\n  } else if (isRef(source)) {\n    // We just got passed an asset directly\n    image = {\n      asset: source,\n    }\n  } else if (isAsset(source)) {\n    // If we were passed an image asset document\n    image = {\n      asset: {\n        _ref: source._id || '',\n      },\n    }\n  } else if (isAssetStub(source)) {\n    // If we were passed a partial asset (`url`, but no `_id`)\n    image = {\n      asset: {\n        _ref: urlToId(source.asset.url),\n      },\n    }\n  } else if (typeof source.asset === 'object') {\n    // Probably an actual image with materialized asset\n    image = source\n  } else {\n    // We got something that does not look like an image, or it is an image\n    // that currently isn't sporting an asset.\n    return null\n  }\n\n  const img = source as SanityImageObject\n  if (img.crop) {\n    image.crop = img.crop\n  }\n\n  if (img.hotspot) {\n    image.hotspot = img.hotspot\n  }\n\n  return applyDefaults(image)\n}\n\nfunction isUrl(url: string) {\n  return /^https?:\\/\\//.test(`${url}`)\n}\n\nfunction urlToId(url: string) {\n  const parts = url.split('/').slice(-1)\n  return `image-${parts[0]}`.replace(/\\.([a-z]+)$/, '-$1')\n}\n\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image: SanityImageObject) {\n  if (image.crop && image.hotspot) {\n    return image as Required<SanityImageObject>\n  }\n\n  // We need to pad in default values for crop or hotspot\n  const result = {...image}\n\n  if (!result.crop) {\n    result.crop = {\n      left: 0,\n      top: 0,\n      bottom: 0,\n      right: 0,\n    }\n  }\n\n  if (!result.hotspot) {\n    result.hotspot = {\n      x: 0.5,\n      y: 0.5,\n      height: 1.0,\n      width: 1.0,\n    }\n  }\n\n  return result as Required<SanityImageObject>\n}\n","import parseAssetId from './parseAssetId'\nimport parseSource from './parseSource'\nimport {\n  CropSpec,\n  HotspotSpec,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAsset,\n  SanityAsset,\n  SanityImageFitResult,\n  SanityImageRect,\n  SanityReference,\n} from './types'\n\nexport const SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n  ['width', 'w'],\n  ['height', 'h'],\n  ['format', 'fm'],\n  ['download', 'dl'],\n  ['blur', 'blur'],\n  ['sharpen', 'sharp'],\n  ['invert', 'invert'],\n  ['orientation', 'or'],\n  ['minHeight', 'min-h'],\n  ['maxHeight', 'max-h'],\n  ['minWidth', 'min-w'],\n  ['maxWidth', 'max-w'],\n  ['quality', 'q'],\n  ['fit', 'fit'],\n  ['crop', 'crop'],\n  ['saturation', 'sat'],\n  ['auto', 'auto'],\n  ['dpr', 'dpr'],\n]\n\nexport default function urlForImage(options: ImageUrlBuilderOptions) {\n  let spec = {...(options || {})}\n  const source = spec.source\n  delete spec.source\n\n  const image = parseSource(source)\n  if (!image) {\n    return null\n  }\n\n  const id = (image.asset as SanityReference)._ref || (image.asset as SanityAsset)._id || ''\n  const asset = parseAssetId(id)\n\n  // Compute crop rect in terms of pixel coordinates in the raw source image\n  const cropLeft = Math.round(image.crop.left * asset.width)\n  const cropTop = Math.round(image.crop.top * asset.height)\n  const crop = {\n    left: cropLeft,\n    top: cropTop,\n    width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n    height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop),\n  }\n\n  // Compute hot spot rect in terms of pixel coordinates\n  const hotSpotVerticalRadius = (image.hotspot.height * asset.height) / 2\n  const hotSpotHorizontalRadius = (image.hotspot.width * asset.width) / 2\n  const hotSpotCenterX = image.hotspot.x * asset.width\n  const hotSpotCenterY = image.hotspot.y * asset.height\n  const hotspot = {\n    left: hotSpotCenterX - hotSpotHorizontalRadius,\n    top: hotSpotCenterY - hotSpotVerticalRadius,\n    right: hotSpotCenterX + hotSpotHorizontalRadius,\n    bottom: hotSpotCenterY + hotSpotVerticalRadius,\n  }\n\n  // If irrelevant, or if we are requested to: don't perform crop/fit based on\n  // the crop/hotspot.\n  if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n    spec = {...spec, ...fit({crop, hotspot}, spec)}\n  }\n\n  return specToImageUrl({...spec, asset})\n}\n\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec: ImageUrlBuilderOptionsWithAsset) {\n  const cdnUrl = spec.baseUrl || 'https://cdn.sanity.io'\n  const filename = `${spec.asset.id}-${spec.asset.width}x${spec.asset.height}.${spec.asset.format}`\n  const baseUrl = `${cdnUrl}/images/${spec.projectId}/${spec.dataset}/${filename}`\n\n  const params = []\n\n  if (spec.rect) {\n    // Only bother url with a crop if it actually crops anything\n    const {left, top, width, height} = spec.rect\n    const isEffectiveCrop =\n      left !== 0 || top !== 0 || height !== spec.asset.height || width !== spec.asset.width\n\n    if (isEffectiveCrop) {\n      params.push(`rect=${left},${top},${width},${height}`)\n    }\n  }\n\n  if (spec.bg) {\n    params.push(`bg=${spec.bg}`)\n  }\n\n  if (spec.focalPoint) {\n    params.push(`fp-x=${spec.focalPoint.x}`)\n    params.push(`fp-y=${spec.focalPoint.y}`)\n  }\n\n  const flip = [spec.flipHorizontal && 'h', spec.flipVertical && 'v'].filter(Boolean).join('')\n  if (flip) {\n    params.push(`flip=${flip}`)\n  }\n\n  // Map from spec name to url param name, and allow using the actual param name as an alternative\n  SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach((mapping) => {\n    const [specName, param] = mapping\n    if (typeof spec[specName] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[specName])}`)\n    } else if (typeof spec[param] !== 'undefined') {\n      params.push(`${param}=${encodeURIComponent(spec[param])}`)\n    }\n  })\n\n  if (params.length === 0) {\n    return baseUrl\n  }\n\n  return `${baseUrl}?${params.join('&')}`\n}\n\nfunction fit(\n  source: {crop: CropSpec; hotspot: HotspotSpec},\n  spec: ImageUrlBuilderOptions\n): SanityImageFitResult {\n  let cropRect: SanityImageRect\n\n  const imgWidth = spec.width\n  const imgHeight = spec.height\n\n  // If we are not constraining the aspect ratio, we'll just use the whole crop\n  if (!(imgWidth && imgHeight)) {\n    return {width: imgWidth, height: imgHeight, rect: source.crop}\n  }\n\n  const crop = source.crop\n  const hotspot = source.hotspot\n\n  // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n  const desiredAspectRatio = imgWidth / imgHeight\n  const cropAspectRatio = crop.width / crop.height\n\n  if (cropAspectRatio > desiredAspectRatio) {\n    // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n    const height = crop.height\n    const width = height * desiredAspectRatio\n    const top = crop.top\n\n    // Center output horizontally over hotspot\n    const hotspotXCenter = (hotspot.right - hotspot.left) / 2 + hotspot.left\n    let left = hotspotXCenter - width / 2\n\n    // Keep output within crop\n    if (left < crop.left) {\n      left = crop.left\n    } else if (left + width > crop.left + crop.width) {\n      left = crop.left + crop.width - width\n    }\n\n    cropRect = {\n      left: Math.round(left),\n      top: Math.round(top),\n      width: Math.round(width),\n      height: Math.round(height),\n    }\n  } else {\n    // The crop is taller than the desired ratio, we are cutting from top and bottom\n    const width = crop.width\n    const height = width / desiredAspectRatio\n    const left = crop.left\n\n    // Center output vertically over hotspot\n    const hotspotYCenter = (hotspot.bottom - hotspot.top) / 2 + hotspot.top\n    let top = hotspotYCenter - height / 2\n\n    // Keep output rect within crop\n    if (top < crop.top) {\n      top = crop.top\n    } else if (top + height > crop.top + crop.height) {\n      top = crop.top + crop.height - height\n    }\n\n    cropRect = {\n      left: Math.max(0, Math.floor(left)),\n      top: Math.max(0, Math.floor(top)),\n      width: Math.round(width),\n      height: Math.round(height),\n    }\n  }\n\n  return {\n    width: imgWidth,\n    height: imgHeight,\n    rect: cropRect,\n  }\n}\n\n// For backwards-compatibility\nexport {parseSource}\n","import {\n  AutoMode,\n  CropMode,\n  FitMode,\n  ImageFormat,\n  ImageUrlBuilderOptions,\n  ImageUrlBuilderOptionsWithAliases,\n  Orientation,\n  SanityClient,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport urlForImage, {SPEC_NAME_TO_URL_NAME_MAPPINGS} from './urlForImage'\n\nconst validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min']\nconst validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy']\nconst validAutoModes = ['format']\n\nfunction isSanityClient(client?: SanityClient): client is SanityClient {\n  return client ? typeof client.clientConfig === 'object' : false\n}\n\nfunction rewriteSpecName(key: string) {\n  const specs = SPEC_NAME_TO_URL_NAME_MAPPINGS\n  for (const entry of specs) {\n    const [specName, param] = entry\n    if (key === specName || key === param) {\n      return specName\n    }\n  }\n\n  return key\n}\n\nexport default function urlBuilder(options?: SanityClient | SanityProjectDetails) {\n  // Did we get a SanityClient?\n  const client = options as SanityClient\n  if (isSanityClient(client)) {\n    // Inherit config from client\n    const {apiHost: apiUrl, projectId, dataset} = client.clientConfig\n    const apiHost = apiUrl || 'https://api.sanity.io'\n    return new ImageUrlBuilder(null, {\n      baseUrl: apiHost.replace(/^https:\\/\\/api\\./, 'https://cdn.'),\n      projectId,\n      dataset,\n    })\n  }\n\n  // Or just accept the options as given\n  return new ImageUrlBuilder(null, options as ImageUrlBuilderOptions)\n}\n\nexport class ImageUrlBuilder {\n  public options: ImageUrlBuilderOptions\n\n  constructor(parent: ImageUrlBuilder | null, options: ImageUrlBuilderOptions) {\n    this.options = parent\n      ? {...(parent.options || {}), ...(options || {})} // Merge parent options\n      : {...(options || {})} // Copy options\n  }\n\n  withOptions(options: Partial<ImageUrlBuilderOptionsWithAliases>) {\n    const baseUrl = options.baseUrl || this.options.baseUrl\n\n    const newOptions: {[key: string]: any} = {baseUrl}\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        const specKey = rewriteSpecName(key)\n        newOptions[specKey] = options[key]\n      }\n    }\n\n    return new ImageUrlBuilder(this, {baseUrl, ...newOptions})\n  }\n\n  // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n  // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n  // studio, the 'image'-document must be provided.\n  image(source: SanityImageSource) {\n    return this.withOptions({source})\n  }\n\n  // Specify the dataset\n  dataset(dataset: string) {\n    return this.withOptions({dataset})\n  }\n\n  // Specify the projectId\n  projectId(projectId: string) {\n    return this.withOptions({projectId})\n  }\n\n  // Specify background color\n  bg(bg: string) {\n    return this.withOptions({bg})\n  }\n\n  // Set DPR scaling factor\n  dpr(dpr: number) {\n    return this.withOptions({dpr})\n  }\n\n  // Specify the width of the image in pixels\n  width(width: number) {\n    return this.withOptions({width})\n  }\n\n  // Specify the height of the image in pixels\n  height(height: number) {\n    return this.withOptions({height})\n  }\n\n  // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n  focalPoint(x: number, y: number) {\n    return this.withOptions({focalPoint: {x, y}})\n  }\n\n  maxWidth(maxWidth: number) {\n    return this.withOptions({maxWidth})\n  }\n\n  minWidth(minWidth: number) {\n    return this.withOptions({minWidth})\n  }\n\n  maxHeight(maxHeight: number) {\n    return this.withOptions({maxHeight})\n  }\n\n  minHeight(minHeight: number) {\n    return this.withOptions({minHeight})\n  }\n\n  // Specify width and height in pixels\n  size(width: number, height: number) {\n    return this.withOptions({width, height})\n  }\n\n  // Specify blur between 0 and 100\n  blur(blur: number) {\n    return this.withOptions({blur})\n  }\n\n  sharpen(sharpen: number) {\n    return this.withOptions({sharpen})\n  }\n\n  // Specify the desired rectangle of the image\n  rect(left: number, top: number, width: number, height: number) {\n    return this.withOptions({rect: {left, top, width, height}})\n  }\n\n  // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n  format(format: ImageFormat) {\n    return this.withOptions({format})\n  }\n\n  invert(invert: boolean) {\n    return this.withOptions({invert})\n  }\n\n  // Rotation in degrees 0, 90, 180, 270\n  orientation(orientation: Orientation) {\n    return this.withOptions({orientation})\n  }\n\n  // Compression quality 0-100\n  quality(quality: number) {\n    return this.withOptions({quality})\n  }\n\n  // Make it a download link. Parameter is default filename.\n  forceDownload(download: boolean | string) {\n    return this.withOptions({download})\n  }\n\n  // Flip image horizontally\n  flipHorizontal() {\n    return this.withOptions({flipHorizontal: true})\n  }\n\n  // Flip image verically\n  flipVertical() {\n    return this.withOptions({flipVertical: true})\n  }\n\n  // Ignore crop/hotspot from image record, even when present\n  ignoreImageParams() {\n    return this.withOptions({ignoreImageParams: true})\n  }\n\n  fit(value: FitMode) {\n    if (validFits.indexOf(value) === -1) {\n      throw new Error(`Invalid fit mode \"${value}\"`)\n    }\n\n    return this.withOptions({fit: value})\n  }\n\n  crop(value: CropMode) {\n    if (validCrops.indexOf(value) === -1) {\n      throw new Error(`Invalid crop mode \"${value}\"`)\n    }\n\n    return this.withOptions({crop: value})\n  }\n\n  // Saturation\n  saturation(saturation: number) {\n    return this.withOptions({saturation})\n  }\n\n  auto(value: AutoMode) {\n    if (validAutoModes.indexOf(value) === -1) {\n      throw new Error(`Invalid auto mode \"${value}\"`)\n    }\n\n    return this.withOptions({auto: value})\n  }\n\n  // Gets the url based on the submitted parameters\n  url() {\n    return urlForImage(this.options)\n  }\n\n  // Alias for url()\n  toString() {\n    return this.url()\n  }\n}\n","const objectAssign = require('object-assign')\nconst buildMarksTree = require('./buildMarksTree')\nconst nestLists = require('./nestLists')\nconst generateKeys = require('./generateKeys')\nconst mergeSerializers = require('./mergeSerializers')\n\n// Properties to extract from props and pass to serializers as options\nconst optionProps = ['projectId', 'dataset', 'imageOptions']\nconst isDefined = val => typeof val !== 'undefined'\nconst defaults = {imageOptions: {}}\n\nfunction blocksToNodes(h, properties, defaultSerializers, serializeSpan) {\n  const props = objectAssign({}, defaults, properties)\n  const rawBlocks = Array.isArray(props.blocks) ? props.blocks : [props.blocks]\n  const keyedBlocks = generateKeys(rawBlocks)\n  const blocks = nestLists(keyedBlocks, props.listNestMode)\n  const serializers = mergeSerializers(defaultSerializers, props.serializers || {})\n\n  const options = optionProps.reduce((opts, key) => {\n    const value = props[key]\n    if (isDefined(value)) {\n      opts[key] = value\n    }\n    return opts\n  }, {})\n\n  function serializeNode(node, index, siblings, isInline) {\n    if (isList(node)) {\n      return serializeList(node)\n    }\n\n    if (isListItem(node)) {\n      return serializeListItem(node, findListItemIndex(node, siblings))\n    }\n\n    if (isSpan(node)) {\n      return serializeSpan(node, serializers, index, {serializeNode})\n    }\n\n    return serializeBlock(node, index, isInline)\n  }\n\n  function findListItemIndex(node, siblings) {\n    let index = 0\n    for (let i = 0; i < siblings.length; i++) {\n      if (siblings[i] === node) {\n        return index\n      }\n\n      if (!isListItem(siblings[i])) {\n        continue\n      }\n\n      index++\n    }\n\n    return index\n  }\n\n  function serializeBlock(block, index, isInline) {\n    const tree = buildMarksTree(block)\n    const children = tree.map((node, i, siblings) => serializeNode(node, i, siblings, true))\n    const blockProps = {\n      key: block._key || `block-${index}`,\n      node: block,\n      isInline,\n      serializers,\n      options\n    }\n\n    return h(serializers.block, blockProps, children)\n  }\n\n  function serializeListItem(block, index) {\n    const key = block._key\n    const tree = buildMarksTree(block)\n    const children = tree.map(serializeNode)\n    return h(serializers.listItem, {node: block, serializers, index, key, options}, children)\n  }\n\n  function serializeList(list) {\n    const type = list.listItem\n    const level = list.level\n    const key = list._key\n    const children = list.children.map(serializeNode)\n    return h(serializers.list, {key, level, type, options}, children)\n  }\n\n  // Default to false, so `undefined` will evaluate to the default here\n  const renderContainerOnSingleChild = Boolean(props.renderContainerOnSingleChild)\n\n  const nodes = blocks.map(serializeNode)\n  if (renderContainerOnSingleChild || nodes.length > 1) {\n    const containerProps = props.className ? {className: props.className} : {}\n    return h(serializers.container, containerProps, nodes)\n  }\n\n  if (nodes[0]) {\n    return nodes[0]\n  }\n\n  return typeof serializers.empty === 'function' ? h(serializers.empty) : serializers.empty\n}\n\nfunction isList(block) {\n  return block._type === 'list' && block.listItem\n}\n\nfunction isListItem(block) {\n  return block._type === 'block' && block.listItem\n}\n\nfunction isSpan(block) {\n  return typeof block === 'string' || block.marks || block._type === 'span'\n}\n\nmodule.exports = blocksToNodes\n","const defaultMarks = ['strong', 'em', 'code', 'underline', 'strike-through']\n\nconst buildMarksTree = block => {\n  const {children, markDefs} = block\n  if (!children || !children.length) {\n    return []\n  }\n\n  const sortedMarks = children.map(sortMarksByOccurences)\n  const rootNode = {_type: 'span', children: []}\n  let nodeStack = [rootNode]\n\n  children.forEach((span, i) => {\n    const marksNeeded = sortedMarks[i]\n    if (!marksNeeded) {\n      const lastNode = nodeStack[nodeStack.length - 1]\n      lastNode.children.push(span)\n      return\n    }\n\n    let pos = 1\n\n    // Start at position one. Root is always plain and should never be removed. (?)\n    if (nodeStack.length > 1) {\n      for (pos; pos < nodeStack.length; pos++) {\n        const mark = nodeStack[pos].markKey\n        const index = marksNeeded.indexOf(mark)\n        // eslint-disable-next-line max-depth\n        if (index === -1) {\n          break\n        }\n\n        marksNeeded.splice(index, 1)\n      }\n    }\n\n    // Keep from beginning to first miss\n    nodeStack = nodeStack.slice(0, pos)\n\n    // Add needed nodes\n    let currentNode = findLastParentNode(nodeStack)\n    marksNeeded.forEach(mark => {\n      const node = {\n        _type: 'span',\n        _key: span._key,\n        children: [],\n        mark: markDefs.find(def => def._key === mark) || mark,\n        markKey: mark\n      }\n\n      currentNode.children.push(node)\n      nodeStack.push(node)\n      currentNode = node\n    })\n\n    // Split at newlines to make individual line chunks, but keep newline\n    // characters as individual elements in the array. We use these characters\n    // in the span serializer to trigger hard-break rendering\n    if (isTextSpan(span)) {\n      const lines = span.text.split('\\n')\n      for (let line = lines.length; line-- > 1; ) {\n        lines.splice(line, 0, '\\n')\n      }\n\n      currentNode.children = currentNode.children.concat(lines)\n    } else {\n      currentNode.children = currentNode.children.concat(span)\n    }\n  })\n\n  return rootNode.children\n}\n\n// We want to sort all the marks of all the spans in the following order:\n// 1. Marks that are shared amongst the most adjacent siblings\n// 2. Non-default marks (links, custom metadata)\n// 3. Built-in, plain marks (bold, emphasis, code etc)\nfunction sortMarksByOccurences(span, i, spans) {\n  if (!span.marks || span.marks.length === 0) {\n    return span.marks || []\n  }\n\n  const markOccurences = span.marks.reduce((occurences, mark) => {\n    occurences[mark] = occurences[mark] ? occurences[mark] + 1 : 1\n\n    for (let siblingIndex = i + 1; siblingIndex < spans.length; siblingIndex++) {\n      const sibling = spans[siblingIndex]\n\n      if (sibling.marks && Array.isArray(sibling.marks) && sibling.marks.indexOf(mark) !== -1) {\n        occurences[mark]++\n      } else {\n        break\n      }\n    }\n\n    return occurences\n  }, {})\n\n  const sortByOccurence = sortMarks.bind(null, markOccurences)\n\n  // Slicing because sort() mutates the input\n  return span.marks.slice().sort(sortByOccurence)\n}\n\nfunction sortMarks(occurences, markA, markB) {\n  const aOccurences = occurences[markA] || 0\n  const bOccurences = occurences[markB] || 0\n\n  if (aOccurences !== bOccurences) {\n    return bOccurences - aOccurences\n  }\n\n  const aDefaultPos = defaultMarks.indexOf(markA)\n  const bDefaultPos = defaultMarks.indexOf(markB)\n\n  // Sort default marks last\n  if (aDefaultPos !== bDefaultPos) {\n    return aDefaultPos - bDefaultPos\n  }\n\n  // Sort other marks simply by key\n  if (markA < markB) {\n    return -1\n  } else if (markA > markB) {\n    return 1\n  }\n\n  return 0\n}\n\nfunction isTextSpan(node) {\n  return (\n    node._type === 'span' &&\n    typeof node.text === 'string' &&\n    (Array.isArray(node.marks) || typeof node.marks === 'undefined')\n  )\n}\n\nfunction findLastParentNode(nodes) {\n  for (let i = nodes.length - 1; i >= 0; i--) {\n    const node = nodes[i]\n    if (node._type === 'span' && node.children) {\n      return node\n    }\n  }\n\n  return undefined\n}\n\nmodule.exports = buildMarksTree\n","const objectAssign = require('object-assign')\n\n/* eslint-disable max-depth, complexity */\nfunction nestLists(blocks, mode = 'html') {\n  const tree = []\n  let currentList\n\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i]\n    if (!isListBlock(block)) {\n      tree.push(block)\n      currentList = null\n      continue\n    }\n\n    // Start of a new list?\n    if (!currentList) {\n      currentList = listFromBlock(block)\n      tree.push(currentList)\n      continue\n    }\n\n    // New list item within same list?\n    if (blockMatchesList(block, currentList)) {\n      currentList.children.push(block)\n      continue\n    }\n\n    // Different list props, are we going deeper?\n    if (block.level > currentList.level) {\n      const newList = listFromBlock(block)\n\n      if (mode === 'html') {\n        // Because HTML is kinda weird, nested lists needs to be nested within list items\n        // So while you would think that we could populate the parent list with a new sub-list,\n        // We actually have to target the last list element (child) of the parent.\n        // However, at this point we need to be very careful - simply pushing to the list of children\n        // will mutate the input, and we don't want to blindly clone the entire tree.\n\n        // Clone the last child while adding our new list as the last child of it\n        const lastListItem = lastChild(currentList)\n        const newLastChild = objectAssign({}, lastListItem, {\n          children: lastListItem.children.concat(newList)\n        })\n\n        // Swap the last child\n        currentList.children[currentList.children.length - 1] = newLastChild\n      } else {\n        currentList.children.push(newList)\n      }\n\n      // Set the newly created, deeper list as the current\n      currentList = newList\n      continue\n    }\n\n    // Different list props, are we going back up the tree?\n    if (block.level < currentList.level) {\n      // Current list has ended, and we need to hook up with a parent of the same level and type\n      const match = findListMatching(tree[tree.length - 1], block)\n      if (match) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      }\n\n      // Similar parent can't be found, assume new list\n      currentList = listFromBlock(block)\n      tree.push(currentList)\n      continue\n    }\n\n    // Different list props, different list style?\n    if (block.listItem !== currentList.listItem) {\n      const match = findListMatching(tree[tree.length - 1], {level: block.level})\n      if (match && match.listItem === block.listItem) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      } else {\n        currentList = listFromBlock(block)\n        tree.push(currentList)\n        continue\n      }\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn('Unknown state encountered for block', block)\n    tree.push(block)\n  }\n\n  return tree\n}\n\nfunction isListBlock(block) {\n  return Boolean(block.listItem)\n}\n\nfunction blockMatchesList(block, list) {\n  return block.level === list.level && block.listItem === list.listItem\n}\n\nfunction listFromBlock(block) {\n  return {\n    _type: 'list',\n    _key: `${block._key}-parent`,\n    level: block.level,\n    listItem: block.listItem,\n    children: [block]\n  }\n}\n\nfunction lastChild(block) {\n  return block.children && block.children[block.children.length - 1]\n}\n\nfunction findListMatching(rootNode, matching) {\n  const filterOnType = typeof matching.listItem === 'string'\n  if (\n    rootNode._type === 'list' &&\n    rootNode.level === matching.level &&\n    (filterOnType && rootNode.listItem === matching.listItem)\n  ) {\n    return rootNode\n  }\n\n  const node = lastChild(rootNode)\n  if (!node) {\n    return false\n  }\n\n  return findListMatching(node, matching)\n}\n\nmodule.exports = nestLists\n","const objectAssign = require('object-assign')\n\nmodule.exports = blocks => {\n  return blocks.map(block => {\n    if (block._key) {\n      return block\n    }\n\n    return objectAssign({_key: getStaticKey(block)}, block)\n  })\n}\n\nfunction getStaticKey(item) {\n  return checksum(JSON.stringify(item))\n    .toString(36)\n    .replace(/[^A-Za-z0-9]/g, '')\n}\n\n/* eslint-disable no-bitwise */\nfunction checksum(str) {\n  let hash = 0\n  const strlen = str.length\n  if (strlen === 0) {\n    return hash\n  }\n\n  for (let i = 0; i < strlen; i++) {\n    hash = (hash << 5) - hash + str.charCodeAt(i)\n    hash &= hash // Convert to 32bit integer\n  }\n\n  return hash\n}\n/* eslint-enable no-bitwise */\n","const React = require('react')\nconst {getSerializers} = require('@sanity/block-content-to-hyperscript/internals')\n\nconst renderNode = React.createElement\nconst {defaultSerializers, serializeSpan} = getSerializers(renderNode)\n\nmodule.exports = {\n  serializeSpan,\n  serializers: defaultSerializers,\n  renderProps: {nestMarks: true}\n}\n"],"sourceRoot":""}